
\usepackage{xkeyval}
\makeatletter

\define@key{strips}{negative-preconditions}[1]{\def\@conditiontype{#1}}
\define@key{strips}{disjunctive-preconditions}[2]{\def\@conditiontype{#1}}
\define@key{strips}{conditional-effects}[1]{\def\@usecondeffect{#1}}
\define@key{strips}{action-costs}[1]{\def\@usecost{#1}}
\define@key{strips}{derived-predicates}[1]{\def\@useaxiom{#1}}
\define@key{strips}{lifted}[1]{\def\@lifted{#1}}
\define@key{strips}{optimal}[1]{\def\@optimal{#1}}
\define@key{strips}{satisficing}[1]{\def\@satisficing{#1}}
\define@key{strips}{agile}[1]{\def\@agile{#1}}
\define@key{strips}{unitcost}[1]{\def\@unitcost{#1}}

\def\conditionset{
\if\@useaxiom0
P
\else
P\cup P_X
\fi
}

\let\satisfies@orig\satisfies

\def\satisfies{
\if\@conditiontype0
\supseteq
\else
\satisfies@orig
\fi
}

\def\condition{
\if\@conditiontype0
\conditionset
\else
\mathcal{F}(\conditionset)
\fi
}

\def\ga{
\if\@lifted0
a
\else
a^{\dagger}
\fi
}

\def\applyformula{
\if\@usecondeffect0
(s \setminus \dele(a)) \cup \adde(a)
\else
(s
 \setminus \braces{e \mid (c \triangleright e) \in \dele(\ga), c\satisfies s})
 \cup      \braces{e \mid (c \triangleright e) \in \adde(\ga), c\satisfies s}
\fi
}

\NewDocumentCommand{\strips}{O{}}{
\def\@useaxiom{0}
\def\@conditiontype{0}
\def\@usecondeffect{0}
\def\@usecost{0}
\def\@lifted{0}
\def\@optimal{0}
\def\@unitcost{0}
%
\setkeys{strips}{#1}%
\if\@lifted1
  \strips@propositional\par
  \strips@lifted
\else
  \strips@propositional
\fi
}



\newcommand{\strips@propositional}{
%
%
%
%
\if\@conditiontype1
Given a set of propositional variables $V$,
let $\mathcal{F}(V)$ be a propositional formula consisting of $V$ and
logical operations $\braces{\land,\lnot}$.
\fi
\if\@conditiontype2
Given a set of propositional variables $V$,
let $\mathcal{F}(V)$ be a propositional formula consisting of $V$ and
logical operations $\braces{\land,\lor,\lnot}$.
\fi
%
%
%
%
\if\@useaxiom0
%
We define a propositional STRIPS Planning problem
as a 4-tuple $\brackets{P,A,I,G}$
where
 $P$ is a set of propositional variables,
 $A$ is a set of actions,
 $I\subseteq P$ is the initial state, and
 $G\subseteq \conditionset$ is a goal condition.
%
\else
%
We define a propositional STRIPS Planning problem
as a 6-tuple $\brackets{P,A,X,P_X,I,G}$
where
 $P$ is a set of propositions,
 $A$ is a set of actions,
 $X$ is a set of axioms,
 $P_X$ is a set of derived propositions ($P\cap P_X=\emptyset$),
 $I\subseteq P$ is the initial state, and
 $G\subseteq \conditionset$ is a goal condition.
%
\fi
%
%
%
%
\if\@usecost0
Each action $a\in A$ is a 3-tuple $\brackets{\pre(a),\adde(a),\dele(a)}$ where
\else
Each action $a\in A$ is a 4-tuple $\brackets{\pre(a),\adde(a),\dele(a),\cost(a)}$ where
$\cost(a) \in \Z^{0+}$ is a cost,
\fi
%
%
%
%
$\pre(a) \subseteq \condition$ is a precondition and
%
%
%
%
\if\@usecondeffect0
$\adde(a), \dele(a)\subseteq P$ are the add-effects and delete-effects.
\else
$\adde(a), \dele(a)$ are the add-effects and delete-effects.
Each effect is denoted as $c \triangleright e$ where
$c \in \condition$ is an \emph{effect condition} and
$e \in P$.
\fi
%
%
%
%
\if\@useaxiom1
The set of axioms $X$ consists of clauses $f \Rightarrow p$ where
$f \in \condition$ is a body and $p \in P_X$ is a head.
\fi
%
%
%
%
A state $s\subseteq \conditionset$ is a set of true propositions
(all of $P\setminus s$ is false),
an action $a$ is \emph{applicable} when $s \satisfies \pre(a)$ (read: $s$ \emph{satisfies} $\pre(a)$),
and applying action $a$ to $s$ yields a new successor state
%
%
%
%
\if\@useaxiom0
$a(s) = \applyformula$.
\else
$a(s)$.
To compute $a(s)$, we first obtain a non-derived state
$s' \gets \applyformula \setminus P_X $.
Then we perform a fix-point calculation
$s' \gets s' \cup \braces{p \in P_X \mid (f\Rightarrow p)\in X \land s \satisfies f}$.
\fi

The task of classical planning is to find a sequence of actions called a \emph{plan} $(\ga_1,\cdots,\ga_n)$
where, for $1\leq t\leq n$,
 $s_0=I$, $s_t\satisfies \pre(a_{t+1})$, $s_{t+1}=a_{t+1}(s_t)$,
 and $s_n\satisfies G$.
\if\@optimal1
 A plan is \emph{optimal} if
 \if\@usecost0%
   there is no shorter plan.
 \else%
   there is no plan with lower cost $\sum_t \cost(a_t)$.
 \fi
 \if\@satisficing1
   A plan is otherwise called \emph{satisficing}.
   \if\@agile1
     In particular, a problem setting that completely ignores the solution quality is called \emph{agile} setting,
     while \emph{satisficing} setting implies that the solver still attempts to find a
     \if\@usecost0%
       shorter
     \else%
       cheaper
     \fi
     plan.
     This paper focuses on the \emph{agile} setting.
   \else
     This paper focuses on the \emph{satisficing} setting.
   \fi
 \fi
 \if\@usecost1
  \if\@unitcost1
  We assume unit-cost: $\forall a\in A; \cost(a)=1$.
  \fi
 \fi
\fi
}





\newcommand{\strips@lifted}{
In \emph{Lifted STRIPS}, each propositional variable is an \emph{instantiation}/\emph{grounding} of
a first-order logic predicate.
Each predicate $p(x_1,\ldots,x_{\ar{p}})$ is parameterized by a list of parameters/variables/arguments $X=(x_1,\ldots,x_{\ar{p}})$,
where $\ar{p}$ is an \emph{arity} of $p$.
A proposition is obtained by substituting each $x_i$ with an \emph{object} in a set $O$.
Each $p$ therefore has $O^{\ar{p}}$ instantiations.
Similarly, each action $a\in A$ is now called a \emph{ground action},
which is an instantiation of a \emph{lifted action} $a(x_1,\ldots,x_{\ar{p}})$ parameterized by $\ar{a}$ parameters.
A ground action is obtained by substituting the arguments as well as
the parameters used in the preconditions and the effects.
}


\makeatother
